#!/usr/bin/env python3

import cmd
import getpass
import gpg
import os
import random
import readline
import string
import subprocess
import sys


class Pw(cmd.Cmd):

    def __init__(self, path):
        super().__init__()
        self.prompt = '> '
        self._path = path
        self._data = {}
        self._key = None
        self._gpg = gpg.Context()
        self._gpg.set_ctx_flag('no-symkey-cache', '1')


    def preloop(self):
        # Make readline split the line the same way we do.
        self._old_completer_delims = readline.get_completer_delims()
        readline.set_completer_delims(string.whitespace)

        if os.path.exists(self._path):
            self._load()
        else:
            self._define_key()
            self._save()


    def postloop(self):
        readline.set_completer_delims(self._old_completer_delims)


    def cmdloop(self):
        # Exit cmdloop on ^C.
        try:
            super().cmdloop()
        except KeyboardInterrupt:
            print()


    def default(self, s):
        # Exit the cmdloop on ^D.
        if s == 'EOF':
            print()
            return True
        self.do_help(s)


    def emptyline(self):
        # Do not repeat the previous command.
        pass


    def completenames(self, text, line, begidx, endidx):
        names = super().completenames(text, line, begidx, endidx)
        if len(names) == 1:
            names[0] += ' '
        return names


    def do_help(self, s):
        print()
        print('Commands:')
        for name in self.get_names():
            if name.startswith('do_') and name != 'do_help':
                print(getattr(self, name).__doc__)
        print()


    def complete_help(self, *ignored):
        return []


    def do_add(self, s):
        '''add <id>'''
        s = s.split()
        if len(s) != 1:
            self._print_err('Usage: ' + self.do_add.__doc__)
            return
        idx = s[0]
        if idx in self._data:
            self._print_err('Id exists!')
            return
        self._data[idx] = []
        while True:
            line = input('" ')
            if not line:
                break
            self._data[idx].append(line)
        self._save()


    def complete_add(self, text, line, begidx, endidx):
        ps = []
        for id_ in self._complete_ids(text, line, begidx, endidx):
            i = id_.find('/')
            if i == -1:
                continue
            p = id_[:i+1]
            if p not in ps:
                ps.append(p)
        return ps


    def do_del(self, s):
        '''del <id>'''
        s = s.split()
        if len(s) != 1:
            self._print_err('Usage: ' + self.do_del.__doc__)
            return
        id_ = s[0]
        if id_ not in self._data:
            self._print_err('Not found!')
            return
        if not self._confirm():
            return
        del self._data[id_]
        self._save()


    def complete_del(self, text, line, begidx, endidx):
        return self._complete_ids(text, line, begidx, endidx)


    def do_get(self, s):
        '''get <id> [+show]'''
        s = s.split()
        if not s or len(s) > 2:
            self._print_err('Usage: ' + self.do_get.__doc__)
            return
        id_ = s[0]
        if id_ not in self._data:
            self._print_err('Not found!')
            return
        if not self._data[id_]:
            return
        if len(s) == 2:
            self._print_ok('\n'.join(self._data[id_]))
        else:
            self._print_ok('\n'.join(['*' * 10] + self._data[id_][1:]))
        self._copy_to_clipboard(self._data[id_][0])


    def complete_get(self, text, line, begidx, endidx):
        return self._complete_ids(text, line, begidx, endidx)


    def do_gen(self, s):
        '''gen <len> [-punct]'''
        s = s.split()
        if not s or len(s) > 2:
            self._print_err('Usage: ' + self.do_gen.__doc__)
            return
        try:
            n = int(s[0])
            if n < 1:
                raise ValueError()
        except ValueError:
            self._print_err('Usage: ' + self.do_gen.__doc__)
            return

        css = [string.ascii_lowercase, string.ascii_uppercase, string.digits]
        if len(s) != 2:
            css.append(string.punctuation)

        key = []
        for cs in css:
            key.append(random.choice(cs))
        while len(key) < n:
            key.append(random.choice(''.join(css)))
        random.shuffle(key)
        key = ''.join(key)

        self._print_ok(key)
        self._copy_to_clipboard(key)


    def do_passwd(self, s):
        '''passwd'''
        if s:
            self._print_err('Usage: ' + self.do_passwd.__doc__)
            return
        self._define_key()
        self._save()


    def _complete_ids(self, text, line, begidx, endidx):
        i = len((line[:begidx] + '$').split()) - 1
        if i != 1:
            return []
        ids = [id_ for id_ in self._data.keys() if id_.startswith(text)]
        if len(ids) == 1:
            ids[0] += ' '
        return ids


    def _define_key(self):
        while True:
            newkey = getpass.getpass('Enter new password: ')
            if not newkey.strip():
                continue
            repeat = getpass.getpass('Repeat new password: ')
            if newkey == repeat:
                self._key = newkey
                return
            self._print_err('Does not match!')


    def _confirm(self):
        while True:
            ans = input('Are you sure? (y/n): ')
            if ans == 'n':
                return False
            if ans == 'y':
                return True


    def _print_ok(self, s):
        print(f'\x1b[32m{s}\x1b[0m')


    def _print_err(self, s):
        print(f'\x1b[31m{s}\x1b[0m')


    def _copy_to_clipboard(self, s):
        s = s.encode()
        subprocess.Popen(['xsel', '-b'], stdin=subprocess.PIPE).communicate(s)
        subprocess.Popen(['xsel', '-p'], stdin=subprocess.PIPE).communicate(s)


    def _load(self):
        with open(self._path, 'rb') as f:
            cipher = f.read()

        while True:
            self._key = getpass.getpass('Password: ')
            try:
                plain, _, _ = self._gpg.decrypt(cipher, passphrase=self._key)
                break
            except gpg.errors.GPGMEError as e:
                if e.code == gpg.errors.DECRYPT_FAILED:
                    self._print_err('Wrong!')
                else:
                    self._print_err('Error: ' + e.message)

        self._data = {}
        id_ = None
        for line in plain.decode().split('\n'):
            line = line.strip()
            if not line:
                id_ = None
            elif not id_:
                id_ = line
                self._data[id_] = []
            else:
                self._data[id_].append(line)


    def _save(self):
        plain = ''
        for id_ in sorted(self._data):
            plain += '\n'.join([id_] + self._data[id_]) + '\n\n'

        cipher, _, _ = self._gpg.encrypt(plain.encode(), sign=False, passphrase=self._key)

        with open(self._path + '.new', 'wb') as f:
            f.write(cipher)
        os.rename(self._path + '.new', self._path)


if __name__ == '__main__':
    path = sys.argv[1] if len(sys.argv) > 1 else os.getenv('HOME') + '/.pw.gpg'
    Pw(path).cmdloop()
